{"version":3,"sources":["components/PhoneForm.js","components/PhoneInfo.js","components/PhoneInfoList.js","App.js","serviceWorker.js","index.js"],"names":["PhoneForm","state","name","phone","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","onCreate","onSubmit","this","className","placeholder","onChange","type","Component","PhoneInfo","editing","handleRemove","info","onRemove","id","handleToggleEdit","nextProps","nextState","prevProps","prevState","onUpdate","onClick","defaultProps","PhoneInfoList","data","list","map","key","console","warn","App","information","keyword","handleCreate","concat","filter","handleUpdate","filteredList","indexOf","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.98f60c42.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass PhoneForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    phone: \"\",\r\n  };\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  handleSubmit = (e) => {\r\n    // Prevent page reloading\r\n    e.preventDefault();\r\n    // Pass state values to the parent by onCreate\r\n    this.props.onCreate(this.state);\r\n    // Initialize state\r\n    this.setState({\r\n      name: \"\",\r\n      phone: \"\",\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className=\"phoneform-container\">\r\n        <input\r\n          placeholder=\"Name\"\r\n          value={this.state.name}\r\n          onChange={this.handleChange}\r\n          name=\"name\"\r\n        />\r\n        <input\r\n          placeholder=\"Phone\"\r\n          value={this.state.phone}\r\n          onChange={this.handleChange}\r\n          name=\"phone\"\r\n        />\r\n        <button type=\"submit\">Register</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhoneForm;\r\n","import React, { Component } from \"react\";\r\n\r\nclass PhoneInfo extends Component {\r\n  static defaultProps = {\r\n    info: {\r\n      name: \"$NAME\",\r\n      phone: \"010-0000-0000\",\r\n      id: 0,\r\n    },\r\n  };\r\n\r\n  state = {\r\n    // If an edit button is clicked, editing = true.\r\n    // If editing === true, change plaintext values to <input>.\r\n    editing: false,\r\n\r\n    // <input> values are fluent, so each <input> values\r\n    // must be defined as fields.\r\n    name: \"\",\r\n    phone: \"\",\r\n  };\r\n\r\n  handleRemove = () => {\r\n    // If a delete button is clicked,\r\n    // call onRemove by passing the id.\r\n    const { info, onRemove } = this.props;\r\n    onRemove(info.id);\r\n  };\r\n\r\n  // Toggles this.state.editing value.\r\n  // Thus, true -> false & false -> true.\r\n  handleToggleEdit = () => {\r\n    const { editing } = this.state;\r\n    this.setState({ editing: !editing });\r\n  };\r\n\r\n  // <input> onChange event function\r\n  handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    // If it is not EDIT mode & has same info, abort re-rendering.\r\n    if (\r\n      !this.state.editing &&\r\n      !nextState.editing &&\r\n      nextProps.info === this.props.info\r\n    ) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    /**\r\n     *  [ \"editing\" mode logic ]\r\n     *\r\n     *  1. If EDIT is clicked\r\n     *     >> Its values shown in <input>\r\n     *  2. If SAVE is clicked\r\n     *     >> Pass values in <input> to its parent (App)\r\n     */\r\n    const { info, onUpdate } = this.props;\r\n\r\n    // editing === false -> true\r\n    // Set values in info(original values) to the state\r\n    if (!prevState.editing && this.state.editing) {\r\n      this.setState({\r\n        name: info.name,\r\n        phone: info.phone,\r\n      });\r\n    }\r\n\r\n    // eiditing === true -> false\r\n    if (prevState.editing && !this.state.editing) {\r\n      onUpdate(info.id, {\r\n        name: this.state.name,\r\n        phone: this.state.phone,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { editing } = this.state;\r\n\r\n    // Edit mode\r\n    if (editing) {\r\n      return (\r\n        <div className=\"phoneinfo-container\">\r\n          <div>\r\n            <input\r\n              value={this.state.name}\r\n              name=\"name\"\r\n              placeholder=\"Name\"\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n          <div>\r\n            <input\r\n              value={this.state.phone}\r\n              name=\"phone\"\r\n              placeholder=\"Phone\"\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n          <button onClick={this.handleToggleEdit}>SAVE</button>\r\n          <button onClick={this.handleRemove}>DELETE</button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // List mode\r\n    const { name, phone } = this.props.info;\r\n    return (\r\n      <div className=\"phoneinfo-container\">\r\n        <div>\r\n          <b>{name}</b>\r\n        </div>\r\n        <div>{phone}</div>\r\n        <button onClick={this.handleToggleEdit}>EDIT</button>\r\n        <button onClick={this.handleRemove}>DELETE</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhoneInfo;\r\n","import React, { Component } from \"react\";\r\nimport PhoneInfo from \"./PhoneInfo\";\r\n\r\nclass PhoneInfoList extends Component {\r\n  static defaultProps = {\r\n    data: [],\r\n    onRemove: () => console.warn(\"onRemove not defined\"),\r\n    onUpdate: () => console.warn(\"onUpdate not defined\"),\r\n  };\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return nextProps.data !== this.props.data;\r\n  }\r\n\r\n  render() {\r\n    const { data, onRemove, onUpdate } = this.props;\r\n\r\n    /**\r\n     *  [Key Allocation]\r\n     *  - Keys must be identical\r\n     *  - Keys must not be varied\r\n     */\r\n    const list = data.map((info) => (\r\n      <PhoneInfo\r\n        key={info.id}\r\n        info={info}\r\n        onRemove={onRemove}\r\n        onUpdate={onUpdate}\r\n      />\r\n    ));\r\n\r\n    return <div>{list}</div>;\r\n  }\r\n}\r\n\r\nexport default PhoneInfoList;\r\n","import React, { Component } from \"react\";\nimport PhoneForm from \"./components/PhoneForm\";\nimport PhoneInfoList from \"./components/PhoneInfoList\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  id = 2;\n  state = {\n    information: [\n      {\n        id: 0,\n        name: \"Jooho Lee\",\n        phone: \"010-1234-5678\",\n      },\n      {\n        id: 1,\n        name: \"Mato Sakura\",\n        phone: \"070-5882-8282\",\n      },\n    ],\n    keyword: \"\",\n  };\n\n  handleChange = (e) => {\n    this.setState({ keyword: e.target.value });\n  };\n\n  handleCreate = (data) => {\n    const { information } = this.state;\n    this.setState({\n      information: information.concat({ id: this.id++, ...data }),\n    });\n  };\n\n  handleRemove = (id) => {\n    const { information } = this.state;\n    this.setState({\n      information: information.filter((info) => info.id !== id),\n    });\n  };\n\n  handleUpdate = (id, data) => {\n    const { information } = this.state;\n    this.setState({\n      information: information.map((info) =>\n        info.id === id ? { id, ...data } : info\n      ),\n    });\n  };\n\n  render() {\n    const { information, keyword } = this.state;\n    const filteredList = information.filter(\n      (info) => info.name.indexOf(keyword) !== -1\n    );\n    return (\n      <div className=\"app-container\">\n        <h2>React Phonebook Demo</h2>\n        <PhoneForm onCreate={this.handleCreate} />\n        <div className=\"search-container\">\n          <input\n            placeholder=\"Search by Name\"\n            onChange={this.handleChange}\n            value={keyword}\n          />\n        </div>\n        <PhoneInfoList\n          data={filteredList}\n          onRemove={this.handleRemove}\n          onUpdate={this.handleUpdate}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}